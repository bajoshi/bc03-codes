### BC03 Installation and Working Notes ###

--------------------------------------------------------------------------
FOR THE NEWER 2016 UPDATED VERSION

1. Download the required files from http://www.bruzual.org/
There is a link for the updated GALAXEV 2016 version. There is also a link to 
the other directories you will need. I downloaded the MILES models (all IMFs) 
along with the source code (in the src/ folder).

2. You will have to work with this software using csh.

3. For the newer version, I did not have to modify the Makefile at all.
It seems like they've made the required changes (among other things).
Simply put in the $bc03 variable in my .cshrc.

4. Switch to csh and source .cshrc if needed.

5. Now you only need to do the 3 steps mentioned in the manual.
>> cd $bc03
>> source ./.bc_cshrc
>> make all

When you do >>source ./.bc_cshrc there will be an error when it does
not find the $bc97 variable since we never defined this. I found that 
everything still works perfectly if this line is commented out.

6. To run csp_galaxev do
>> ./csp_galaxev

7. You will need to have the required SSP ised files in the src/ folder though.
Gunzip the ised files from the MILES folders and transfer them to the src/ 
folder. Now you can work with csp_galaxev.
You do not have to make the ised files executable like the older version.

This version of GALAXEV gives many more output files than the older version.
The manual doesn't seem to say much about them so you need to find out by 
looking in the files.

When running csp_galaxev, if it gives an error by saying enter correct filter 
file or something like that then you need to source .bc_cshrc again. Or if you 
run your python code and nothing happens. 
You will have to source .bc_cshrc everytime this happens.
.bc_cshrc lives in the src/ folder.

--------------------------------------------------------------------------
To run the code to generate the model set.

1. You will need to run the code run_grid.py. 
This code lives in the src/ folder.
This is to generate the set of models (.ised files)
based on a chosen grid of parameters.

1a. Open the code in an editor and check the __main__ function
to see that all parameters are set correctly.
1b. Check that the output and input directories are also set correctly.

2. Run the code, i.e., 
bash$ >> cd_to_src_folder
bash$ >> csh
csh$ >> source .bc_cshrc
csh$ >> python run_grid.py

This code will take some time to run. Many hours (~10) on the under-powered laptop.
Takes ~3 hours on firstlight.

3. Now convert all the spectra in .ised format to .fits.
Run the code called bc03_extractspectra.py in the bc03-codes repository,
$HOME/Documents/GALAXEV_BC03/bc03-codes/
>> cd to bc03-codes
>> python bc03_extractspectra.py
Make sure before running the code that you've selected the correct IMF.

4. After this code finishes running, you will have to run 
get_model_set() and other functions to save required arrays
in massive-galaxies/codes/new_refine_grismz_iter.py
to gather and save all the generated models into a .npy or .fits file.
>> cd_to_massive-galaxies_codes
>> python new_refine_grismz_iter.py

This will run 
(i) get_model_set()
This function gathers all the models from within the individual fits files and 
store the required ones (i.e., within chosen age range and the coarser tau and 
tau_v ranges) into a single large fits file.

(ii) add_emission_lines_and_save(figs_data_dir, chosen_imf)
This code will add emission lines to the models. Make sure that you've told the 
function about all the emission lines you want to add and that none are missing.
If you are using a larger redshift range for fitting then make sure that you 
include all possible lines that could be observed either in the photometry and 
especially in the grism spectra.

This code will write the models with emission lines to a new .npy file. It will
also save the models without emission lines to a .npy file.

(iii) do_hdr2npy(figs_data_dir, chosen_imf)
This takes the header info from the large fits files for the models (i.e., age, 
n_lyc, tau, etc) and saves each parameter to a separate .npy file.

--------------------------------------------------------------------------
--------------------------------------------------------------------------
NOTES FOR THE OLDER 2003 VERSION
--------------------------------------------------------------------------
--------------------------------------------------------------------------
1. When you download the main file from their website it comes with the four subdirectories:
/doc /models /src /templates

2. To actually use the entire functionality of BC03 models you need to compile their code first

3. The bc03.ps file which is the manual to using the models is very helpful.
3a. It will ask you to change the makefile according to your needs.
3b. cd $bc03
This variable has to be defined first in your .cshrc. See manual.
It needs to point to the src/ directory.

--> You are now in the ./bc03/src directory
Now change the Makefile.
I did the following...
-- changed fortran compiler from g77 to fortran
-- changed the end of that same line 
-- it now reads -ffixed-line-length-none instead of -ffixed-line-length-132

This change was done because gfortran by default reads only the first 132 characters in a line of code and the rest is not read which makes the code meaningless. This change gets it to read the entire line.

3c. make all in terminal. This will create executable files of their code.

4. Now you can use their fortran programs to get SEDs from their models and do other stuff.

5. Final comment: to run any code you will need a ./ at the beginning. Example: ./bin_ised will convert the ascii file to a .ised file which their galaxevpl program can read.
5a. The alias gpl for galaxevpl will not work because it does not have the ./
Use ./galaxevpl instead of gpl.
